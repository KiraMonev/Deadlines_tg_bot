import logging
from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from logic.bot.keyboards.user_keyboards import (back_keyboard,
                                                reminder_time_keyboard,
                                                remove_keyboard,
                                                task_manager_keyboard)
from logic.bot.states.UserStates import UserState
from logic.bot.utils.parser import calculate_reminder, parse_date, parse_time
from logic.db.database import db

router = Router()


@router.callback_query(F.data == "change_deadline")
async def change_deadline_button(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.TASK_CHANGE_DATE)
    message = await callback_query.message.edit_text(
        "üóì –ù–∞–∑–Ω–∞—á—å—Ç–µ –Ω–æ–≤—É—é <b>–¥–∞—Ç—É</b> —ç—Ç–æ–π –∑–∞–¥–∞—á–µ",
        reply_markup=back_keyboard(),
    )
    await state.update_data(last_message_id=message.message_id)


@router.message(F.text, UserState.TASK_CHANGE_DATE)
async def exchange_deadline_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await remove_keyboard(message.bot, message.chat.id, last_message_id)

    new_date = parse_date(message.text)
    if not new_date:
        new_message = await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "<code>–î–î.–ú–ú</code> –∏–ª–∏ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.",
            reply_markup=back_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        return

    await state.update_data(deadline_date=new_date)
    await state.set_state(UserState.TASK_CHANGE_TIME)
    new_message = await message.answer(
        f"üóì –ù–æ–≤–∞—è –¥–∞—Ç–∞: <i>{new_date}</i>\n\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–≤—Ä–µ–º—è</b> –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞",
        reply_markup=back_keyboard()
    )
    await state.update_data(last_message_id=new_message.message_id)


@router.message(F.text, UserState.TASK_CHANGE_TIME)
async def exchange_deadline_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await remove_keyboard(message.bot, message.chat.id, last_message_id)

    new_time = parse_time(message.text)
    if not new_time:
        new_message = await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>.",
            reply_markup=back_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        return

    task_id = data.get("current_data", {}).get("_id")
    new_date = data.get("deadline_date")

    if not task_id:
        new_message = await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞.",
            reply_markup=back_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        return

    await state.update_data(new_deadline_time=new_time)
    new_message = await message.answer(
        f"üóì –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: <i>{new_date} {new_time}</i>\n\n"
        "‚è∞ –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞.",
        reply_markup=reminder_time_keyboard()
    )
    await state.update_data(last_message_id=new_message.message_id)
    await state.set_state(UserState.TASK_CHANGE_REMINDER_TIME)


REMINDER_TIMES = {
    "reminder_1h": timedelta(hours=1),
    "reminder_4h": timedelta(hours=4),
    "reminder_1d": timedelta(days=1),
    "reminder_none": None,
}


@router.callback_query(F.data.in_(REMINDER_TIMES.keys()), UserState.TASK_CHANGE_REMINDER_TIME)
async def change_reminder_time(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await remove_keyboard(callback_query.bot, callback_query.message.chat.id, last_message_id)

    task_id = data.get("current_data", {}).get("_id")
    new_date = data.get("deadline_date")
    new_time = data.get("new_deadline_time")

    if not task_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞.")
        return

    reminder_offset = REMINDER_TIMES[callback_query.data]
    reminder_date, reminder_time = await calculate_reminder(
        reminder_offset=reminder_offset,
        date=data["deadline_date"],
        time=data["new_deadline_time"]
    )

    try:
        await db.update_task_details(
            task_id=task_id,
            new_deadline_date=new_date,
            new_deadline_time=new_time,
            reminder_date=reminder_date,
            reminder_time=reminder_time
        )
        task = await db.get_task(task_id)

        if reminder_date and reminder_time:
            reminder_text = f"{reminder_date} {reminder_time}"
        else:
            reminder_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        message_text = (
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ó–∞–¥–∞—á–∞: {task['text']}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {new_date} {new_time}\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if task['is_completed'] else '–ù–µ—Ç'}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {task['created_at'].strftime('%Y-%m-%d %H:%M')}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        await callback_query.message.edit_text(
            message_text,
            reply_markup=task_manager_keyboard(),
        )
    except Exception as e:
        logging.error(e)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.")
    finally:
        await state.set_state(UserState.TASK_MANAGEMENT)
        await state.update_data(current_data=await db.get_task(task_id))
