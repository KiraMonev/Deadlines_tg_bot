import logging
from datetime import timedelta

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from logic.bot.keyboards.user_keyboards import (back_keyboard,
                                                reminder_time_keyboard)
from logic.bot.states.UserStates import UserState
from logic.bot.utils.decorators import clear_last_keyboard
from logic.bot.utils.parser import calculate_reminder, parse_date, parse_time
from logic.db.database import db

router = Router()


@router.callback_query(F.data == "new_deadline")
@clear_last_keyboard
async def new_deadline_button(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.TASK_ADD_TEXT)
    message = await callback_query.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.",
        reply_markup=back_keyboard()
    )
    return message


@router.message(F.text, UserState.TASK_ADD_TEXT)
@clear_last_keyboard
async def set_deadline_text(message: Message, state: FSMContext):
    await state.update_data(data_text=message.text)
    await state.set_state(UserState.TASK_ADD_DATE)
    new_message = await message.answer(
        "‚úçÔ∏è <b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–∏–º –¥–∞—Ç—É.\n\n"
        "üóì –ù–∞–ø–∏—à–∏—Ç–µ <b>–¥–∞—Ç—É</b> –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞.",
        reply_markup=back_keyboard()
    )
    return new_message


@router.message(F.text, UserState.TASK_ADD_DATE)
@clear_last_keyboard
async def set_deadline_date(message: Message, state: FSMContext):
    formatted_date = parse_date(message.text)
    if not formatted_date:
        new_message = await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "<code>–î–î.–ú–ú</code> –∏–ª–∏ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.",
            reply_markup=back_keyboard()
        )
        return new_message

    await state.update_data(data_date=formatted_date)
    data = await state.get_data()
    await state.set_state(UserState.TASK_ADD_TIME)
    new_message = await message.answer(
        f"üóì –ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É: <i>{data['data_date']}</i>\n\n"
        "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞.",
        reply_markup=back_keyboard()
    )
    return new_message


@router.message(F.text, UserState.TASK_ADD_TIME)
@clear_last_keyboard
async def set_deadline_time(message: Message, state: FSMContext):
    formatted_time = parse_time(message.text)
    if not formatted_time:
        new_message = await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>.",
            reply_markup=back_keyboard()
        )
        return new_message

    await state.update_data(data_time=formatted_time)
    data = await state.get_data()
    new_message = await message.answer(
        f"üóì –ü–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º—è: <i>{data['data_time']}</i>\n\n"
        "‚è∞ –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞.",
        reply_markup=reminder_time_keyboard()
    )
    await state.set_state(UserState.TASK_ADD_REMINDER_TIME)
    return new_message


REMINDER_TIMES = {
    "reminder_1h": timedelta(hours=1),
    "reminder_4h": timedelta(hours=4),
    "reminder_1d": timedelta(days=1),
    "reminder_none": None,  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
}


@router.callback_query(F.data.in_(REMINDER_TIMES.keys()), UserState.TASK_ADD_REMINDER_TIME)
@clear_last_keyboard
async def set_reminder_time(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    reminder_offset = REMINDER_TIMES[callback_query.data]
    reminder_date, reminder_time = await calculate_reminder(
        reminder_offset=reminder_offset,
        date=data["data_date"],
        time=data["data_time"]
    )

    try:
        await db.add_task(user_id=callback_query.from_user.id,
                          text=data["data_text"],
                          deadline_date=data["data_date"],
                          deadline_time=data["data_time"],
                          reminder_date=reminder_date,
                          reminder_time=reminder_time)
        new_message = await callback_query.message.edit_text(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"–ó–∞–¥–∞—á–∞: {data['data_text']}\n"
            f"–î–µ–¥–ª–∞–π–Ω: <i>{data['data_date']} {data['data_time']}</i>\n\n"
            "–í—Å–µ –≤ —Ü–µ–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏! üëç",
            reply_markup=back_keyboard(),
        )

    except Exception as e:
        logging.error(e)
        new_message = await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ",
                                                  reply_markup=back_keyboard())
    finally:
        await state.set_state(UserState.MAIN_MENU)
    return new_message
