from datetime import datetime
from itertools import groupby
from operator import itemgetter

from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from logic.bot.keyboards.user_keyboards import (back_keyboard, remove_keyboard,
                                                task_manager_keyboard)
from logic.bot.states.UserStates import UserState
from logic.db.database import db

router = Router()


def get_hours_left(deadline_date: str, deadline_time: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞."""
    now = datetime.now()
    deadline_str = f"{deadline_date} {deadline_time}"
    deadline_dt = datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")
    time_left = deadline_dt - now
    return max(0, round(time_left.total_seconds() / 3600))  # –ú–∏–Ω–∏–º—É–º 0, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π


@router.callback_query(F.data == "show_deadlines")
async def show_deadline_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á</b>\n\n"
        "‚úèÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä.\n"
        "‚ùó –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª.",
        parse_mode=ParseMode.HTML
    )

    await state.set_state(UserState.TASK_PICK)

    user_id = callback_query.from_user.id
    data = await db.get_tasks(user_id)

    if not data:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á", reply_markup=back_keyboard())
        await state.clear()
        return

    task_counter = 1
    for date, group in groupby(data, key=itemgetter("deadline_date")):
        tasks = sorted(group, key=itemgetter("deadline_time"))
        message_text = f"üóì <b>{date}</b>\n"

        for i, task in enumerate(tasks):
            hours_left = get_hours_left(task["deadline_date"], task["deadline_time"])
            task_text = f"<b>‚Ññ{task_counter + i} {task['deadline_time']}</b> ({hours_left} —á)\n"
            task_text += f"{'<s>' + task['text'] + '</s>' if task['is_completed'] else task['text']}"
            message_text += task_text + "\n"
        await callback_query.message.answer(message_text, parse_mode=ParseMode.HTML)
        task_counter += len(tasks)

    new_message = await callback_query.message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
        reply_markup=back_keyboard()
    )
    await state.update_data(last_message_id=new_message.message_id)
    await state.update_data(tasks=data)


@router.message(F.text, UserState.TASK_PICK)
async def show_details(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await remove_keyboard(message.bot, message.chat.id, last_message_id)

    tasks = data.get("tasks")
    if not tasks:
        new_message = await message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=back_keyboard())
        await state.update_data(last_message_id=new_message.message_id)
        return

    try:
        task_number = int(message.text)
        if task_number < 1 or task_number > len(tasks):
            new_message = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", reply_markup=back_keyboard())
            await state.update_data(last_message_id=new_message.message_id)
            return

        task = tasks[task_number - 1]

        data["current_data"] = task

        deadline_date = task["deadline_date"]
        deadline_time = task["deadline_time"]
        is_completed = "–î–∞" if task["is_completed"] else "–ù–µ—Ç"
        # reminder_date = task["reminder_date"]
        # reminder_time = task["reminder_time"]
        created_at = task["created_at"].strftime("%Y-%m-%d %H:%M")
        updated_at = task["updated_at"].strftime("%Y-%m-%d %H:%M")
        text = task["text"]

        message_text = (
            f"–ó–∞–¥–∞—á–∞: {text}\n\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_date} {deadline_time}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {updated_at}"
        )
        await state.set_state(UserState.TASK_MANAGEMENT)
        await state.set_data(data)
        await message.answer(message_text, reply_markup=task_manager_keyboard())

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", reply_markup=back_keyboard())
        await state.clear()
