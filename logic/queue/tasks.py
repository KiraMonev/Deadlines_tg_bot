import asyncio
import logging
from datetime import datetime, timedelta, timezone

from celery import shared_task

from logic.bot import bot
from logic.db.database import db


@shared_task
def check_reminders():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(check_reminders_async())


async def check_reminders_async():
    try:
        tasks = await db.get_tasks_with_reminders_date_and_time()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(tasks)}, "
              f"–í—Ä–µ–º—è: {datetime.now(timezone.utc) + timedelta(hours=3)}")
        for task in tasks:
            user_id = task["user_id"]
            text = task['text']
            deadline_date = task['deadline_date']
            deadline_time = task['deadline_time']
            print(user_id)
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id: {user_id}")
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üìå <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n"
                        f"–ó–∞–¥–∞—á–∞: {text}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: <i>{deadline_date} {deadline_time}</i>\n"
                        "–û–Ω–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤–æ–≤—Ä–µ–º—è."
                    ))
                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task['_id']}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


@shared_task
def prolonging_tasks():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(prolonging_tasks_async())


async def prolonging_tasks_async():
    try:
        tasks = await db.get_overdue_tasks()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {len(tasks)}, "
              f"–í—Ä–µ–º—è: {datetime.now(timezone.utc) + timedelta(hours=3)}")
        for task in tasks:
            user_id = task["user_id"]
            text = task['text']
            deadline_date = task['deadline_date']
            deadline_time = task['deadline_time']
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id: {user_id}")
            try:
                now = datetime.now(timezone.utc)
                new_date = (now + timedelta(days=1, hours=3)).strftime("%d.%m.%Y")
                await db.update_task_details(task_id=task['_id'], new_deadline_date=new_date)
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            "üìå <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n"
                            f"–ó–∞–¥–∞—á–∞: <i>{text}</i>\n\n"
                            f"–°—Ç–∞—Ä—ã–π –¥–µ–¥–ª–∞–π–Ω: <i>{deadline_date} {deadline_time}</i>\n"
                            f"–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: <i>{new_date} {deadline_time}</i>\n\n"
                            "–£ –≤–∞—Å –µ—Å—Ç—å –µ—â—ë 1 –¥–µ–Ω—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É!"
                        ))
                    print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {task['_id']}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
