import asyncio
import logging
from datetime import datetime, timedelta

from celery import shared_task

from logic.bot import bot
from logic.db.database import db


@shared_task
def check_reminders():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(check_reminders_async())


async def send_reminder(task):
    user_id = task["user_id"]
    deadline_date = task["deadline_date"]
    deadline_time = task["deadline_time"]
    text = task["text"]
    try:
        await bot.send_message(
            chat_id=user_id,
            text=(
                "üìå <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n"
                f"–ó–∞–¥–∞—á–∞: {text}\n"
                f"–î–µ–¥–ª–∞–π–Ω: <i>{deadline_date} {deadline_time}</i>\n"
                "–û–Ω–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤–æ–≤—Ä–µ–º—è."
            ))
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def check_reminders_async():
    try:
        tasks = await db.get_tasks_with_reminders_date_and_time()
        if tasks:
            await asyncio.gather(*[send_reminder(task) for task in tasks])
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


@shared_task
def prolonging_tasks():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(prolonging_tasks_async())


async def prolong_task(task):
    user_id = task["user_id"]
    deadline_date = task["deadline_date"]
    deadline_time = task["deadline_time"]
    reminder_date = task["reminder_date"]
    text = task["text"]
    try:

        new_deadline = datetime.strptime(deadline_date, "%d.%m.%Y") + timedelta(days=1)
        new_deadline_str = new_deadline.strftime("%d.%m.%Y")

        new_reminder = datetime.strptime(reminder_date, "%d.%m.%Y") + timedelta(days=1)
        new_reminder_str = new_reminder.strftime("%d.%m.%Y")

        await db.update_task_details(
            task_id=task["_id"],
            new_deadline_date=new_deadline_str,
            reminder_date=new_reminder_str
        )
        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "üìå <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n"
                    f"–ó–∞–¥–∞—á–∞: <i>{text}</i>\n\n"
                    f"–°—Ç–∞—Ä—ã–π –¥–µ–¥–ª–∞–π–Ω: <i>{deadline_date} {deadline_time}</i>\n"
                    f"–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: <i>{new_deadline_str} {deadline_time}</i>\n\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å –µ—â—ë 1 –¥–µ–Ω—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É!"
                ))
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def prolonging_tasks_async():
    try:
        tasks = await db.get_overdue_tasks()
        if tasks:
            await asyncio.gather(*[prolong_task(task) for task in tasks])

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
